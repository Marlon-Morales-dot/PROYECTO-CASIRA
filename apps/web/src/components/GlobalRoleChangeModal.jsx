import React, { useState, useEffect } from 'react';
import { useAuth } from '../infrastructure/ui/providers/AppProvider.jsx';
import RoleChangeModal from './RoleChangeModal.jsx';

const GlobalRoleChangeModal = () => {
  const [showModal, setShowModal] = useState(false);
  const [roleChange, setRoleChange] = useState(null);
  const [renderKey, setRenderKey] = useState(0);
  const { user } = useAuth();

  useEffect(() => {
    console.log('üîß GlobalRoleChangeModal: Configurando listeners para usuario:', user?.email);

    const handleRoleChange = (event) => {
      console.log('üîî GlobalRoleChangeModal: EVENTO RECIBIDO:', event.detail);

      const { userEmail, oldRole, newRole } = event.detail;

      // DEPURACI√ìN DETALLADA
      console.log('üìß Email del evento:', userEmail);
      console.log('üë§ Email del usuario actual:', user?.email);
      console.log('üéØ ¬øSon iguales?', user?.email === userEmail);

      // Solo procesar si es para el usuario actual
      if (user && user.email === userEmail) {
        console.log('‚úÖ ¬°EVENTO ES PARA M√ç! Mostrando modal...');

        const roleNames = {
          'admin': 'Administrador',
          'volunteer': 'Voluntario',
          'visitor': 'Visitante'
        };

        setRoleChange({
          oldRole,
          newRole,
          userEmail,
          title: '¬°Tu rol ha sido actualizado!',
          message: `Ahora eres ${roleNames[newRole]}. Ser√°s redirigido a tu nueva √°rea de trabajo.`
        });

        setShowModal(true);
        setRenderKey(prev => prev + 1);

        console.log('‚úÖ Modal configurado y mostrado');
      } else {
        console.log('‚ùå Evento no es para m√≠:', {
          userEmail,
          currentUser: user?.email,
          hasUser: !!user
        });
      }
    };

    window.addEventListener('role-changed', handleRoleChange);

    return () => {
      window.removeEventListener('role-changed', handleRoleChange);
    };
  }, [user]);

  const handleAccept = () => {
    console.log('‚úÖ GlobalRoleChangeModal: Usuario acept√≥ el cambio de rol');

    const roleRoutes = {
      'admin': '/admin/dashboard',
      'volunteer': '/volunteer/dashboard',
      'visitor': '/dashboard'
    };

    const newRoute = roleRoutes[roleChange?.newRole] || '/dashboard';
    console.log(`üöÄ GlobalRoleChangeModal: Navegando a ${newRoute}`);

    // Mostrar indicador de redirecci√≥n
    const roleNames = {
      'admin': 'Panel de Administraci√≥n',
      'volunteer': 'Panel de Voluntario',
      'visitor': 'Panel de Visitante'
    };

    // Actualizar el modal para mostrar estado de redirecci√≥n
    setRoleChange(prev => ({
      ...prev,
      redirecting: true,
      redirectMessage: `Redirigiendo al ${roleNames[roleChange?.newRole] || 'panel correspondiente'}...`
    }));

    // Forzar actualizaci√≥n inmediata del usuario en el contexto
    window.dispatchEvent(new CustomEvent('force-user-refresh'));

    // Redirecci√≥n inmediata con fallback
    setTimeout(() => {
      setShowModal(false);
      setRoleChange(null);

      // Intentar navegaci√≥n con React Router primero
      try {
        window.history.pushState(null, null, newRoute);
        window.dispatchEvent(new PopStateEvent('popstate'));
      } catch (error) {
        // Fallback a location.href
        window.location.href = newRoute;
      }
    }, 1500); // Dar tiempo para que se vea el mensaje de redirecci√≥n
  };

  const handleClose = () => {
    console.log('‚ùå GlobalRoleChangeModal: Usuario cancel√≥ el cambio de rol');
    setShowModal(false);
    setRoleChange(null);
  };

  console.log('üîç GlobalRoleChangeModal: Estado actual:', {
    showModal,
    roleChange,
    user: user?.email,
    renderKey,
    hasUser: !!user,
    modalShouldShow: showModal && roleChange
  });

  return (
    <RoleChangeModal
      key={`modal-${renderKey}-${showModal}`}
      isOpen={showModal}
      onAccept={handleAccept}
      onClose={handleClose}
      roleChange={roleChange}
    />
  );
};

export default GlobalRoleChangeModal;